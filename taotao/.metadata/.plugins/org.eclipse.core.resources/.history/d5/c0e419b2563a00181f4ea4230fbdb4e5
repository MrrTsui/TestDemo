package com.taotao.controller;

import java.io.IOException;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.util.CollectionUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.taotao.pojo.ProductMenuVO;
import com.taotao.pojo.ProductVO;
import com.taotao.service.IproductService;
import com.taotao.utils.BeanToMap;
import com.taotao.utils.ImageUtils;

/**
 * 
 * 
 * <p>
 * Title: ProductController
 * </p>
 * 
 * <p>
 * Description: 商品的控制器
 * </p>
 * 
 * @author wansiliang
 * 
 * @date 2018年4月5日
 */
@Controller
@RequestMapping("/product")
public class ProductController {
	/**
	 * 
	 * 私有内部类，只能再当前方法内使用
	 * <p>
	 * Title: TreeNode
	 * </p>
	 * 
	 * <p>
	 * Description:
	 * </p>
	 * 
	 * @author wansiliang
	 * 
	 * @date 2018年4月6日
	 */
	private class TreeNode implements Serializable {

		/** serialVersionUID */

		private static final long serialVersionUID = 3862795433008931749L;
		// 当前节点的id
		Long id;
		// 节点显示的名称
		String text;
		// 节点的状态，如果是closed就是一个文件夹形式，
		// 当打开时还会 做一次请求。如果是open就显示为叶子节点。
		String state;

		public Long getId() {
			return id;
		}

		public void setId(Long id) {
			this.id = id;
		}

		public String getText() {
			return text;
		}

		public void setText(String text) {
			this.text = text;
		}

		public String getState() {
			return state;
		}

		public void setState(String state) {
			this.state = state;
		}

	}

	@Autowired
	private IproductService productService;

	/**
	 * 
	 * 分页查询商品
	 * <p>
	 * Title: getProducts
	 * </p>
	 * 
	 * <p>
	 * Description:
	 * </p>
	 * 
	 * @param currentPage
	 * @param rows
	 * @return {total:”2”,rows:[{“id”:”1”,”name”,”张三”},{“id”:”2”,”name”,”李四”}]}
	 *         前台为EASYUI其需要的json格式为
	 */
	@RequestMapping("/list")
	@ResponseBody
	public Map<String, Object> getProducts(@RequestParam("page") Integer currentPage,
			@RequestParam("rows") Integer rows) {
		Map<String, Integer> pageVO = calculatePageVO(currentPage, rows);
		List<ProductVO> products = productService.getProduct(pageVO);
		// 如果products 为空返回null
		if (CollectionUtils.isEmpty(products)) {
			return null;
		}
		Map<String, Object> viewPageVo = new HashMap<String, Object>(10);
		// 取大于该小数的最小整数
		viewPageVo.put("total", Math.ceil(products.get(0).getTotalNum() / rows));
		viewPageVo.put("rows", products);
		return viewPageVo;
	}

	private Map<String, Integer> calculatePageVO(Integer currentPage, Integer rows) {
		// 声明起始 id
		Integer startId = null;
		startId = currentPage * rows;
		Map<String, Integer> pageMap = new HashMap<String, Integer>(2);
		pageMap.put("startId", startId);
		pageMap.put("rows", rows);
		return pageMap;
	}

	@RequestMapping(value = "/cat/list", method = { RequestMethod.POST })
	@ResponseBody
	public List<TreeNode> getProductMenus(@RequestParam(value = "id", defaultValue = "0") Long parentId) {

		TreeNode treeNode = null;
		Map<String, Integer> paraMap = new HashMap<String, Integer>(10);
		paraMap.put("parentId", parentId.intValue());
		List<ProductMenuVO> productMenus = productService.getProductMenuVO(paraMap);
		List<TreeNode> treeNodes = new ArrayList<TreeNode>(30);
		for (ProductMenuVO productMenuVO : productMenus) {
			treeNode = new TreeNode();
			treeNode.setId(productMenuVO.getMenuId());
			treeNode.setState(productMenuVO.getIsParent() == 1 ? "closed" : "open");
			treeNode.setText(productMenuVO.getMenuName());
			treeNodes.add(treeNode);
		}
		return treeNodes;
	}

	@RequestMapping(value = "/save", method = RequestMethod.POST)
	public Map<String, Object> saveNewProduct(ProductVO productVO) throws Exception {
		Map<String, Object> resultMap = new HashMap<String, Object>(2);
		// 商品状态，1-正常，2-下架，3-删除
		productVO.setStatus('1');
		Map<String, Object> paraMap = BeanToMap.beanToMap(productVO);
		Boolean saveProductIsOk = productService.saveProduct(paraMap);
		// 前端要求的范围格式
		if (!saveProductIsOk) {
			resultMap.put("status", 200);
			resultMap.put("msg", "OK");
		}
		resultMap.put("status", 500);
		resultMap.put("msg", "false");
		return resultMap;
	}

	@RequestMapping(value = "/pic/upload")
	@ResponseBody
	public Map<String, Object> imageUpload(MultipartFile uploadFile) {
		Map<String, Object> resultMap = new HashMap<String, Object>(2);
		try {
			new Thread(new ImageUtils(uploadFile.getInputStream(), uploadFile.getOriginalFilename())).start();
			// 前端要求的范围格式
			resultMap.put("error", 0);
			resultMap.put("url", "http://www.example.com/path/to/file.ext");

		} catch (IOException e) {
			// TODO Auto-generated catch block
			resultMap.put("error", 1);
			resultMap.put("url", "错误信息");
			e.printStackTrace();
		}
		return resultMap;
	}

}
